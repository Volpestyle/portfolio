name: Deploy (production)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: GitHub environment (defaults to production)
        required: false
        default: production
        type: environment

# OIDC for AWS + read access to repo
permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  # --- Paths (adjust if your layout differs) ---
  # Root of your Next.js app that contains open-next.config.(ts|mjs|cjs)
  APP_ROOT: ${{ vars.NEXT_APP_PATH || '.' }}
  # CDK package directory (where package.json with "cdk" scripts lives)
  CDK_WORKDIR: ${{ vars.CDK_WORKDIR || 'infra/cdk' }}

  # --- Tooling versions ---
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

  # --- Required by your stack / code paths ---
  # Region must be us-east-1 due to Lambda@Edge in your app code.
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}

  # These map straight into process.env read by your CDK app
  APP_DOMAIN_NAME: ${{ vars.APP_DOMAIN_NAME }}
  APP_HOSTED_ZONE_DOMAIN: ${{ vars.APP_HOSTED_ZONE_DOMAIN }}
  APP_CERTIFICATE_ARN: ${{ vars.APP_CERTIFICATE_ARN }}
  APP_ALTERNATE_DOMAINS: ${{ vars.APP_ALTERNATE_DOMAINS }}

  # Secrets Manager ids used by your stack to mount runtime secrets
  SECRETS_MANAGER_ENV_SECRET_ID: ${{ vars.SECRETS_MANAGER_ENV_SECRET_ID }}
  SECRETS_MANAGER_REPO_SECRET_ID: ${{ vars.SECRETS_MANAGER_REPO_SECRET_ID }}

  # Optional repo variables you referenced
  PORTFOLIO_GIST_ID: ${{ vars.PORTFOLIO_GIST_ID }}
  UPSTASH_REDIS_REST_URL: ${{ vars.UPSTASH_REDIS_REST_URL }}

jobs:
  deploy:
    name: Build & CDK deploy (us-east-1)
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'production' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Setup Node and pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      # ----- Build your Next.js app with OpenNext (produces .open-next) -----
      - name: Install app dependencies
        working-directory: ${{ env.APP_ROOT }}
        run: pnpm install --frozen-lockfile

      - name: Build Next.js with OpenNext
        working-directory: ${{ env.APP_ROOT }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          PORTFOLIO_GIST_ID: ${{ env.PORTFOLIO_GIST_ID }}
        run: |
          pnpm dlx @opennextjs/aws@latest build
          test -f .open-next/open-next.output.json

      # ----- Prepare CDK workspace -----
      - name: Install CDK workspace deps
        working-directory: ${{ env.CDK_WORKDIR }}
        run: pnpm install --frozen-lockfile

      - name: Build CDK (TypeScript)
        working-directory: ${{ env.CDK_WORKDIR }}
        run: pnpm run build

      - name: Validate stack configuration
        working-directory: ${{ env.CDK_WORKDIR }}
        run: pnpm run validate

      # ----- Configure AWS credentials -----
      # Prefer OIDC with a deploy role (recommended)
      - name: Configure AWS credentials (OIDC)
        if: ${{ vars.CDK_DEPLOY_ROLE_ARN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.CDK_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      # ----- Deploy -----
      - name: CDK deploy PortfolioStack
        working-directory: ${{ env.CDK_WORKDIR }}
        env:
          # Surface runtime secrets/vars required by your code at synth time;
          # your stack then passes them into Lambda env via collectLambdaEnv().
          PORTFOLIO_GIST_ID: ${{ env.PORTFOLIO_GIST_ID }}
          UPSTASH_REDIS_REST_URL: ${{ env.UPSTASH_REDIS_REST_URL }}
          APP_DOMAIN_NAME: ${{ env.APP_DOMAIN_NAME }}
          APP_HOSTED_ZONE_DOMAIN: ${{ env.APP_HOSTED_ZONE_DOMAIN }}
          APP_CERTIFICATE_ARN: ${{ env.APP_CERTIFICATE_ARN }}
          APP_ALTERNATE_DOMAINS: ${{ env.APP_ALTERNATE_DOMAINS }}
          SECRETS_MANAGER_ENV_SECRET_ID: ${{ env.SECRETS_MANAGER_ENV_SECRET_ID }}
          SECRETS_MANAGER_REPO_SECRET_ID: ${{ env.SECRETS_MANAGER_REPO_SECRET_ID }}
        run: |
          pnpm exec cdk deploy PortfolioStack --require-approval never --verbose
