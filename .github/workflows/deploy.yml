name: Deploy Next.js via CDK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PORTFOLIO_GIST_ID: ${{ vars.PORTFOLIO_GIST_ID }}
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID  }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      UPSTASH_REDIS_REST_URL: ${{ vars.UPSTASH_REDIS_REST_URL }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: pnpm/action-setup@v4
        with: { version: 9 }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint

      # If forked PRs fail due to missing secrets, gate this:
      # if: github.event_name != 'pull_request'
      - name: Build Next.js app
        run: pnpm run build

      - name: Install CDK dependencies
        working-directory: infra/cdk
        run: pnpm install --frozen-lockfile

      - name: Validate CDK stack
        working-directory: infra/cdk
        run: pnpm run check

  deploy:
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request' && (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main')
    permissions:
      id-token: write
      contents: read
    env:
      PORTFOLIO_GIST_ID: ${{ vars.PORTFOLIO_GIST_ID }}
      AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      AWS_REGION: us-east-1 # force edge region
      UPSTASH_REDIS_REST_URL: ${{ vars.UPSTASH_REDIS_REST_URL }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
      # Do NOT expose OPENAI_API_KEY here unless absolutely needed for build
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: pnpm/action-setup@v4
        with: { version: 9 }

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS credentials (us-east-1 for Lambda@Edge)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CDK_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Set CDK env
        run: |
          echo "CDK_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "CDK_DEFAULT_ACCOUNT=${{ secrets.CDK_DEFAULT_ACCOUNT }}" >> $GITHUB_ENV

      - name: Build OpenNext artifacts
        # include OPENAI_API_KEY only if your next build truly needs it
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: pnpm run build:web

      - name: Install CDK dependencies
        working-directory: infra/cdk
        run: pnpm install --frozen-lockfile

      - name: Validate Secrets Config
        run: |
          if [ -z "${SECRETS_MANAGER_REPO_SECRET_ID:-}" ]; then
            echo "SECRETS_MANAGER_REPO_SECRET_ID is not configured. Set a repository variable before deploying." >&2
            exit 1
          fi

      - name: Debug Secrets Env
        run: |
          env | sort | grep -E 'SECRETS_MANAGER|OPENAI' || true

      - name: Deploy CDK stack
        working-directory: infra/cdk
        env:
          APP_DOMAIN_NAME: ${{ vars.APP_DOMAIN_NAME }}
          APP_HOSTED_ZONE_DOMAIN: ${{ vars.APP_HOSTED_ZONE_DOMAIN }}
          APP_ALTERNATE_DOMAINS: ${{ vars.APP_ALTERNATE_DOMAINS }}
          APP_CERTIFICATE_ARN: ${{ vars.APP_CERTIFICATE_ARN }}
          APP_ENV_VARS: ${{ vars.APP_ENV_VARS }}
          APP_ENV_PREFIXES: ${{ vars.APP_ENV_PREFIXES }}
          NEXT_PUBLIC_SITE_URL: ${{ vars.NEXT_PUBLIC_SITE_URL }}
          SECRETS_MANAGER_ENV_SECRET_ID: ${{ vars.SECRETS_MANAGER_ENV_SECRET_ID }}
          SECRETS_MANAGER_REPO_SECRET_ID: ${{ vars.SECRETS_MANAGER_REPO_SECRET_ID }}
          # keep secrets out of CDK env if you can
        run: pnpm cdk deploy --require-approval never
